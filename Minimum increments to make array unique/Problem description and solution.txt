description 
You are given an integer array nums. In one move, you can pick an index i
where 0 <= i < nums.length and increment nums[i] by 1.
Return the minimum number of moves to make every value in nums unique.

brute force approach
to make 1 unique we would have to increment each one element at least 3 times
not effective


Possible Optimization 
for each duplicate value we would have to process only one of them
example if our array is [1,1,1,3,5]
we would only have make the three ones unique (automatically the fourth one will be unique)

Solution One
1. count how many time each value occurs
2. Iterate over all values of x which can never be larger than len(nums) + max(nums)
to prove two look at possible input [5,5,5,5]

for example input [1,1,1,1,3,5]
taken = []

- for x = 0 loop passes
- for x = 1 count[1] = 3
so taken = [1,1,1]
- for x = 2 count[2] = 0
so make one of the duplicate values two
moves += x - taken.pop() where x = 2 and taken.pop() = 1 it takes one move to turn 1 to two

- for x = 3 count[3] = 1
value already uniques so loop passes
- for x = 4 count[4] = 0
make one of the duplicates unique
moves += x - taken.pop() where x = 4 and taken.pop() = 1 3 moves
- for x = 5 count[5] = 1
loop passes

- for x = 6  count[6] = 0
moves += x - taken.pop() where x = 6 and taken.pop() = 1 5 moves

for x = 7 through 10 loop does nothing because no duplicate values will be found and the total will be 9 moves

Solution Two : Sorting
If the arrays is sorted
as we move from left to right
if
    - nums[i - 1] == nums[i] number is duplicated
    - nums[i - 1] < nums[i] take one of the duplicated numbers and make unique

[1,1,1,1,3,5]
at i = 3
taken = 3
moves = -3

at i = 4
give = min(3, 3 - 1 - 1) = 1 slot available
which is 2
moves += 